/* generated by Svelte v3.43.0 */
import {
	SvelteComponent,
	append,
	append_styles,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-17q3uc1", "div.svelte-17q3uc1{background-color:orange}.cl.svelte-17q3uc1{color:red}");
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let div;
	let t2;
	let t3;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Svelte Compiler는 어떻게 실행될까?";
			t1 = space();
			div = element("div");
			t2 = text(/*isClick*/ ctx[0]);
			t3 = space();
			button = element("button");
			button.textContent = "클릭";
			attr(div, "class", "cl svelte-17q3uc1");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, t2);
			insert(target, t3, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*SMButtonClick*/ ctx[1]());
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*isClick*/ 1) set_data(t2, /*isClick*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			if (detaching) detach(t3);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isClick = false;

	function SMButtonClick() {
		$$invalidate(0, isClick = !isClick);
	}

	return [isClick, SMButtonClick];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);
	}
}

export default Component;